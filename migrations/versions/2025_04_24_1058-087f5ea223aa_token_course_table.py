"""token & course table

Revision ID: 087f5ea223aa
Revises: 50164855fc32
Create Date: 2025-04-24 10:58:12.601311

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "087f5ea223aa"
down_revision: Union[str, None] = "50164855fc32"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "course_tasks",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("title", sa.String(length=30), nullable=False),
        sa.Column("condition", sa.String(length=120), nullable=False),
        sa.Column("content", sa.String(length=50), nullable=False),
        sa.Column("execution_duration", sa.Integer(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("condition"),
        sa.UniqueConstraint("content"),
        sa.UniqueConstraint("title"),
    )
    op.create_table(
        "courses",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("title", sa.String(length=30), nullable=False),
        sa.Column("description", sa.String(length=120), nullable=False),
        sa.Column(
            "type",
            sa.Enum("TRAINING", "PROFESSIONAL_DEVELOPMENT", name="coursetype"),
            nullable=False,
        ),
        sa.Column("creation_at", sa.DateTime(), nullable=False),
        sa.Column("last_update_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("title"),
    )
    op.create_table(
        "courses_tasks",
        sa.Column("course_id", sa.Integer(), nullable=False),
        sa.Column("task_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["course_id"],
            ["courses.id"],
        ),
        sa.ForeignKeyConstraint(
            ["task_id"],
            ["course_tasks.id"],
        ),
        sa.PrimaryKeyConstraint("course_id", "task_id"),
    )
    op.drop_table("users")
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "phone_number", sa.CHAR(length=11), autoincrement=False, nullable=False
        ),
        sa.Column(
            "hashed_password",
            sa.VARCHAR(length=256),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(length=30), autoincrement=False, nullable=False),
        sa.Column(
            "surname", sa.VARCHAR(length=30), autoincrement=False, nullable=False
        ),
        sa.Column(
            "patronymic", sa.VARCHAR(length=30), autoincrement=False, nullable=True
        ),
        sa.Column(
            "role",
            postgresql.ENUM("ADMIN", "TRAINER", "USER", name="role"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "gender",
            postgresql.ENUM("MALE", "FEMALE", name="gender"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "date_of_birth",
            sa.DATE(),
            server_default=sa.text("CURRENT_DATE"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "avatar_url", sa.VARCHAR(length=40), autoincrement=False, nullable=True
        ),
        sa.Column(
            "creation_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=False
        ),
        sa.PrimaryKeyConstraint("id", name="users_pkey"),
        sa.UniqueConstraint("phone_number", name="users_phone_number_key"),
    )
    op.drop_table("courses_tasks")
    op.drop_table("courses")
    op.drop_table("course_tasks")
    # ### end Alembic commands ###
